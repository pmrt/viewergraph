//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VgOptions = newVgOptionsTable("public", "vg_options", "")

type vgOptionsTable struct {
	postgres.Table

	//Columns
	SinglerowID          postgres.ColumnBool
	LastReconciliationAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VgOptionsTable struct {
	vgOptionsTable

	EXCLUDED vgOptionsTable
}

// AS creates new VgOptionsTable with assigned alias
func (a VgOptionsTable) AS(alias string) *VgOptionsTable {
	return newVgOptionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VgOptionsTable with assigned schema name
func (a VgOptionsTable) FromSchema(schemaName string) *VgOptionsTable {
	return newVgOptionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VgOptionsTable with assigned table prefix
func (a VgOptionsTable) WithPrefix(prefix string) *VgOptionsTable {
	return newVgOptionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VgOptionsTable with assigned table suffix
func (a VgOptionsTable) WithSuffix(suffix string) *VgOptionsTable {
	return newVgOptionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVgOptionsTable(schemaName, tableName, alias string) *VgOptionsTable {
	return &VgOptionsTable{
		vgOptionsTable: newVgOptionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newVgOptionsTableImpl("", "excluded", ""),
	}
}

func newVgOptionsTableImpl(schemaName, tableName, alias string) vgOptionsTable {
	var (
		SinglerowIDColumn          = postgres.BoolColumn("singlerow_id")
		LastReconciliationAtColumn = postgres.TimestampColumn("last_reconciliation_at")
		allColumns                 = postgres.ColumnList{SinglerowIDColumn, LastReconciliationAtColumn}
		mutableColumns             = postgres.ColumnList{LastReconciliationAtColumn}
	)

	return vgOptionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SinglerowID:          SinglerowIDColumn,
		LastReconciliationAt: LastReconciliationAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
